COMO ADICIONAR O CSS

Inline: Quando os estilos são adicionados por um atributo (<style>)

Internal: Quando o CSS é adicionado na tag head

External: Quando o CSS é adicioando através de um aqruivo externo, e depois importado no HTML

*Vamos sempre optar pelo external, quando puder, vai ajudar a organizar melhor
==============================================================
INLINE


ex.:
<h1 style="color: blue">Mudar cor com o Inline</h1>
(Vai mudar a cor do h1 para azul)


-Múltiplas regras-

Pode-se adicionar várias regras de CSS, separando apenas por ponto e vírgula.

ex.: 

<h1 style="color: blue; font-size: 50px; border-bottom: 1px solid red">Mudar cor e tamanho da fonte</h1>

==============================================================

INTERNAL CSS

É melhor do que o INLINE, colocamos os estilos no head. 
As regras precisam estar em style também
Mas você precisa selecionar o alvo

p{
   color: red;
}

==============================================================

EXTERNAL CSS

Cria-se um arquivo ".css"
Nós importamos pela tag "link"


Criamos um arquivo .css no VSCode, chamamos o arquivo com a tag link no head do HTML.

Depois colocamos as regras no arquivo external.

==============================================================

ORDEM DO CSS

Se temos os três estilos misturados, eles serão aplicados nesta ordem:

inline > internal = external > padrão do navegador;

Funciona quando temos estilos em um mesmo elemento.

*interno e externo têm a mesma prioridade. A última regra ganha a "corrida"

==============================================================

MÚLTIPLOS ARQUIVOS CSS

Para ter mais de um arquivo CSS, basta importá-las na tag head.

Os arquivos importados por último têm mais prioridade.

==============================================================

COMENTÁRIOS CSS

A sintaxe é: /* alguma coisa */

==============================================================

CLASSES E IDS

São atributos de tags do HTML, mas estão diretamente relacionados ao CSS

Podemos especificar elementos específicos

IDS são para elementos ÚNICOS

CLASSES são para um ou mais elementos, geralmente utilizadas em conjunto de elementos.

-CLASSES-
Inseridas através de um atributo HTML

Ex.: <p class="paragraph">Algum texto</p>

O valor do atributo é o nome da classe, e também escolha minha.

Ex.: Um botão que aparece x vezes no projeto, pode-se colocar uma classe btn nele.


O seletor fica: .nome_da_classe

ex.: .paragraph {
		    color: blue;
		}

*Curiosidade: p.color-name -> Cria tag p com classe "color-name"

-IDS-

Também atribuídos ao HTML

São únicos, não repetimos o mesmo nome na mesma página.

O HTML não proíbe, mas é uma má prática

O seletor fica: #nome_do_id

==============================================================

ORDEM DOS SELETORES

Se a tag estiver com ID e uma CLASSE, o que acontece?

Há uma ordem:

ID > Class > seletor de tag

Regras que não entram em conflito serão aplicadas normalmente.

==============================================================

CORES DO CSS

São divididas em grupos:
   -Nomes de Cor: Red ou blue; Pouco utilizados
   -RBG: Configuramos as tonalidades de red, green e blue
   -Hexadecimal: União de letras e números, que cria uma cor; + utilizado
   -HSL: Hue, saturation e lightness, mudando esses valores, temos uma cor

.

-NOMES DAS CORES-
Não é muito utilizado em projetos reais, pois limita apenas a nomes existentes.

*color: (depois clicar em ctrl + espaço, abre uma lista com os nomes de cores)

.

-CORES HEXADECIMAIS-

HEX ou Hexadecimal, a mais utilizada.

Insere 6 dígitos, precedidos de uma #

OS 2 primeiros representam o vermelho, os outros e verde e os ultimos azul

Vão de 0 a 9 e A a F

0 é o mais escuro e F o mais claro

#000 é a cor preta e #FFF a cor branca

.

-MAIS SOBRE HEX-

Se valor repetido 6x, pode escrever apenas com 3 digitos

Ex.: #FFFFFF -> #FFF
Ou também:
     #112233 -> #123

.

-RGB-

Signfica: Red, Green e Blue

Inserimos a intensidade com valores de 0 a 255

0 é o mais escuro e 255 o mais claro.

Aplicamos RGB com a sintaxe: rgb(0-255, 0-255, 0-255)

Exemplo: Criar a cor verde é -> rgb(0, 255, 0)

.

-RGBA-
A vem de Alpha

Alterar ele muda a opacidade da cor

Valores são 0 e 1, sendo 0 transparente e 1 totalmente visível

Sintaxe quase igual: rgba (0-255, 0-255, 0-255, 0-1)

.

-HSL-
Signfica: Hue, saturation e lightness;
Não muito utilizada
Definir cor com: hsl(0-255, 0-100%, 0-100%)

==============================================================

BACKGROUND 

.

-COLOR-

Quase todo elemento tem um background, e nós podemos mudar a cor dele

A regra é: background-color: "cor";

.

-OPACITY-
O opacity pode usar em outros elementos, porém aparece bastante em background.

Regra é: Opacity

Valores vão de 0 a 1 (1 totalmente visível e 0 invisível)

.

-PROBLEMA COM OPACITY-
Se não quer aplicar opacidade para todos os elementos, precisa utilizar RGBA ao invés de OPACITY.

Usando o valor de alpha, a opacidade pode ficar apenas no background.

.

-IMAGES-
Podemos inserir nos elementos

Regra é: background-image: url("pasta/image.jpg")

Geralmente a imagem fica em outra pasta, então tem que voltar um diretório

.

-CENTRALIZANDO A IMAGEM

Pode ser feito com duas regras: background-position com o valor de CENTER

e: background-size com o valor de COVER -> Esse tenta usar o máx da área útil para mostrar o máx possível da img.

==============================================================

BOX MODEL

É criada em todo o elemento do HTML

Consiste em 4 partes: Heigth e Width, padding, border e margin.

Heigth e Width> Tamanho do elemento
Padding-> Espaçamento interno do elemento
Border-> Elemento mais decorativo, fica entre o padding e a margin
Margin-> Espaçamento externo, a distância entre um elemento e outro.

Podem ser alteradas por CSS

Alguns elementos do HTML já vem com valor nestas regras.

.

-HEIGTH AND WIDTH-

São a base de qualquer elemento

Consistem no conteúdo do elemento

Podemos alterar as duas e mudar o tamanho do elemento na tela

Alguns elementos do HTML, block elements, vem com 100% de largura, preenchendo a tela toda na horizontal.

.

-PADDING-

É o espaço entre o conteúdo e a borda do elemento, conhecido como espaçamento interno

É utilizado para criar uma distância entre o conteúdo (texto) e a extremidade do elemento

.

-PADDINGS INDIVIDUAIS-

Pode adicionar o padding aos lados individuais de um elemento

A regra é: padding-*

Onde * pode ser: top, right, bottom ou left

Assim pode ter valores customizados para cada lado

.

-SHORTHAND PROPERTIES-
Permite adicionar padding a todas as direções com uma regra

Apenas precisa utilizar a regra padding e configurar: top, right, bottom e left NESTA ORDEM

Exemplo: padding: 10px 5px 12px 20px;

	 padding: 10px 20px; -> resume em vertical e horizontal

Esta regra pode ser aplicada à outras propriedades, como margin

.

-PADDING E WIDTH-
Quando o padding é adicionado ao width

Um elemento com 200px de width e 25px de padding, tem um tamanho total de 250px na horizontal

Podemos diminuir a largura do elemento, mas dificulta o cáculo

Pode ser RESOLVIDO com  a regra: box-sizing: border-box; Isso faz o elemento respeitar o tamanho que está em width.

.

-BORDER-
Elemento central, fica entre padding e margin

Padding é o espaçamento interno e margin o externo

Geralmente é usado com propósito decorativo

É definida em algumas partes: Tamanho, aspecto e cor da borda

Border: none -> Tira todas as bordas já vindas automáticas.

-BORDERS INDIVIDUAIS-
Podemos adicionar borda em lados específicos

Podemos utilizar border: top, right, bottom ou left


-BORDA ARREDONDADA-
Faz que o canto seja arredondado

Pode usar assim: border-radius 5px

Podemos arredondar elementos que NÃO têm a regra border aplicada

.

-MARGIN-
Responsável pelo espaçamento externo do elemento

Tem lados individuais e shorthand também

==============================================================
.
ALINHAMENTO DE TEXTO

Podem ser alinhados a varias direções. Por padrão é alinhado a esquerda

Regra: text-align -> configura o center(centro) ou right(direita)

Usa-se muito o valor center

.

-DECORAÇÃO DE TEXTO-

text-decoration

É possível colocar uma underline ou até uma linha que corta o texto

Regra utilizada em casos específicos

A tag a tem um underline por padrão, pode remover isso com a regra text-decoration e o valor do none

.

-TRANSFORMAÇÃO DE TEXTO-

Com a REGRA text-transform podemos alterar como o texto é exibido

É possível alterar para uppercase ou lowercase (maiúsculas ou minúsculas)

Não há muitos valores para esta regra

CUIDADO: O CSS deve ser aplicado quando queremos o texto em uppercase, não deve ser escrito com CapsLock no HTML

.

-ESPAÇAMENTO DE LETRAS-

REGRA letter-spacing podemos alterar o espaçamento ente letras de um texto

É interessante quando o layout pede esta mudança

A regra aplicada é-> letter-spacing: 5px

==============================================================

-FONTES-

Pode alterar a fonte com a REGRA: font-family

Regras disponíveis são: Serif, Sans-serif, Monospace, Cursive e Fantasy

Todos os navegadores tem várias fontes que podemos usar

E pode adicionar fontes externas, por exemplo, com o Google Fonts

.

-ESTILO DE FONTE-

Pode usar propriedade font-style para mudar o aspecto das letras

Valores são: normal, italic e oblique

Oblique é como itálico, com poucas diferenças

.

-FONT WEIGHT-

Pode deixar o texto mais fino ou mais grosso

Os valores vão de 100 a 900, sendo 100 o mais fino

Algumas palavras também funcionam como valores, por exemplo: bold(600)

Existem fontes que não tem todas as variações

.

-FONT SIZE-

É responsável por deixar a fonte grande ou pequena

É configurada com unidades de medida, como px

==============================================================

-DISPLAY-

Em HTML e CSS temos elementos que são considerados de bloco e outros inline

Tag div é de block, e span de inline

Com a regra display podemos mudar este comportamento, exemplo, deixar uma div como inline

.

-ESCONDENDO ELEMENTOS-

Exite situações de precisar ocultar elementos da tela

Basta adicionar a regra display com o valor de none

Ele só não é exibido, mas ainda existe no HTML

==============================================================

POSIÇÕES DOS ELEMENTOS

REGRA position e seus valores são responsáveis por posicionar o elemento na tela

Temos algumas possibilidades: relative, fixed, absolute, sticky, e mais

Valor padrão é static, todos começam com esta posição

Regra essencial quando precisamos mudar onde o elemento deve ficar no projeto

.

-POSITION STATIC-

Valor static na position não faz nada com o elemento, é o valor padrão

Outros valores são afetados pelas regras: top, left, right e bottom... o static não

Static apenas segue o fluxo do HTML

.

-POSITION RELATIVE-

As REGRAS top, left right e bottom, movem o elemento pela tela

Ainda segue o fluxo do HTML

ATENÇÃO: Normalmente não utiliza estas regras de posição com o relative

.

-POSITION ABSOLUTE-

O elemento pode ser movido pela tela toda

Ele quebra o fluxo do HTML

Também é afetada pelo top, left, right e bottom

Pode ser uma solução ou um problema posicionar com o absolute, dependendo do ponto de vista

.

-POSITION RELATIVE E ABSOLUTE-

Podemos resolver o problema de absolute com relative

Um elemento com absolute, é ligado ao elemento mais próximo com relative, se não há algum, é ligado ao body

Foi o que houve na aula passada

Então com um container com posição relative, podemos controlar melhor a área de ação dos elementos com absolute

.

-POSITION FIXED-

Elemento pode ser fixado na tela

Mesmo após o scroll na página, ele permanece fixo na mesma posição, estando sempre presente

É frequentemente utilizado para criar uma barra de navegação fixa

.

-POSITION STICKY-

Também faz o elemento ficar fixo na tela

Mas quando ele volta para sua posição original, ele se comporta como relative

.

-Z INDEX-

Se tenho dois elementos com a mesma posição ou se eles colidirem na pagina, posso escolher qual será exibido

Utilizo o z-index para isso

O elemento com maior valor prevalece

==============================================================

-FORMULÁRIO-

Forms tem o papel de receber dados do usuário e enviar para um servidor

Podem validar dados

Tags mais utilizadas: form, label e input

Tag FORM cria um formulário e o delimita

Label descreve os inputs

Input é a tag que inserimos dados, tem vários tipos: number, enail, text, ...
























































TAGS

TAG MAX-WIDHT
Dá uma largura máxima pro elemento, ele não pode ficar maior, apenas menor






















































