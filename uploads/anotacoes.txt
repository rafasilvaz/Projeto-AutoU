Identificadores de Variáveis
- Podemo começar com: Letra, $ ou _
- Não podem começar com números
- É possível usar letras ou números
- É possível usar acentos e símbolos
- Não podem conter espaços
- Não podem ser palavras reservadas (palavras que o JS usa como comando)

* Dicas *
- Maiúsculas e minúsculas fazem diferença.
- Tente escolher nomes coerentes para as Variáveis.
- Evite se tornar um "programador alfabeto" ou um "programados contador"

- COMANDOS - 
typeof -> Mostra o tipo da variável selecionada. Ex.: typeof n
+ -> Concatenação e também adição
window.prompt -> trata os dados inseridos apenas como string

- Number
Number.parseInt(n) -> Converte para numero inteiro
Number.parseFloat(n) -> Converte para numero real
Number -> Deixar para que o JS decida se é inteiro ou real.
to.Fixed(2) -> Formatação de número 
to.Fixed(2).replace(".", ",") -> Muda caracteres (neste caso o ponto pela vírgula)
n1.toLocaleString('pt-BR',(style:'currency', currency: 'BRL')) -> Transforma o número em Reais

- String 
String(n) -> Converter para String
n.toString() -> Converte para uma string
s.length -> Quantos caracteres a string tem
s.toUpperCase() -> tudo para 'MAIÚSCULAS'
s.toDownCase() -> Tudo para 'minúsculas'
Template String -> Utiliza crase e depois os símbolos ${nome}. Forma melhor de mencionar variáveis

- OPERADORES -

-Aritméticos
+, -, *, /, %, **
{
5 + 2 = 7
5 - 2 = 3
5 * 2 = 10
5 / 2 = 2,5 (divisão real)
5 % 2 = 1 (resto da divisão)
5 ** 2 = 25 -> Potência
}
Para utilizar os operadores, é possível simplificar em alguns casos.
Por exemplo se uma variável recebe ela mesma e mais um valor:
n = n + 4 -> n += 4
Também é possível utilizar o "Incremento", ++ ou --
n++ / ++n ou n-- / --n -> adiciona ou subtrai 1

-Relacionais
>, <, >=, <=, ==, ===, !=
{
5 > 2 => true
7 < 4 -> false
8 >= 8 -> true
9 <= 7 -> false
5 == 5 -> true
5 === "5" -> false (=== -> "Idêntico a ", leva em consideração o tipo dos valores)
4 != 4 -> false
}

-Lógicos
! (negação), && (conjunção, E), || (disjunção, OU)
{
! -> true = false / false = true 
&& -> true true = true / true false = false / false true = false / false false = false
||-> true true = true / true false = true / false true = true / false false = false 
}
Ordem de resolução -> 1° !, 2° &&, 3° ||

-Precedência de resolução dos operadores
1° Aritméticos
2° Relacionais
3° Lógicos

-Ternário
? e :
teste ? true : false

teste -> Um teste lógico que retorna true ou false
? -> O que vai acontecer se for verdadeiro
: -> O que vai acontecer se for falso

- DOM -
Document Object Model

É um conjunto de objetos dentro do navegador que dará acesso aos componentes internos do Website.

O DOM está presente quando rodo JS dentro do navegador.

- Árvore DOM de um site
window (janela do navegador)
    *location(qual URL atual)
    *document(docuemnto atual)
    *history(de onde veio, onde vai)

document
    * html

html
    *head -> meta, title...
    *body -> h1, div, p

Selecionando elementos DOM por:
- Marca -> getElementsByTagName()[]
- ID -> getElementByID
- Nome -> getElementsByName()[]
- Classe -> getElementsByClassName()[]
- Seletor -> querySelector()  /  querySelectorAll()

- FUNÇÕES -
Conjunto de linhas (bloco) que são executadas só quando um Evento acontecer.

Para um bloco ser executado somente quando um Evento ocorrer é necessário ser feito:

function ação(parâmetro){
    bloco
}

É possível uma função não ter nome, mas é necessário que tenha. E opcionalmente, pode ter algum parâmetro.